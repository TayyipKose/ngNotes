import {Component, OnInit, OnDestroy, ChangeDetectionStrategy} from '@angular/core';
import {HttpClient, HttpErrorResponse} from '@angular/common/http';
import {Subject, of, throwError} from 'rxjs';
import {catchError, filter, map, takeUntil, tap} from 'rxjs/operators';

@Component({
  selector: 'app-filter',
  template: ``,
})
export class FilterComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  filteredList: any[] = [];
  errorMessage: string | null = null;

  constructor(private http: HttpClient) {
  }

  ngOnInit(): void {
    this.apiGetProducts().pipe(
      filter(products => Array.isArray(products)),
      map(products => products.filter(product => product.price > 100)),
      map(products =>
        products.map(product => ({
          ...product,
          name: product.name.toUpperCase()
        }))
      ),
      tap(products => console.log('FiltrelenmiÅŸ Ã¼rÃ¼nler:', products)),
      //tap, Observableâ€™dan geÃ§en veriyi deÄŸiÅŸtirmeden yan etki yaratmak (Ã¶rneÄŸin loglama yapmak) iÃ§in kullanÄ±lÄ±r.


      map(products => products.slice(0, 5)), // Ä°lk 5 Ã¼rÃ¼nÃ¼ al
      tap(products => console.log('Ä°lk 5 Ã¼rÃ¼n:', products)), // Logla
      map(products => products.sort((a, b) => a.name.localeCompare(b.name))), // Ä°simlere gÃ¶re alfabetik sÄ±rala

      catchError((err: HttpErrorResponse) => {
        this.errorMessage = this.handleError(err);
        return of([]); // Hata olsa da boÅŸ dizi dÃ¶nelim ki akÄ±ÅŸ devam etsin
      }),
      takeUntil(this.destroy$) //her subscribe Ã¶ncesinde olmazsa olmaz koymazsak ngOnDestroy tetiklendiÄŸinde aboneliÄŸi otomatik iptal edemez.
    ).subscribe(filtered => {
      this.filteredList = filtered;
    });
  }


  private apiGetProducts() {
    return this.http.get<any[]>(`api/products`).pipe(
      catchError(err => throwError(() => new Error('ÃœrÃ¼nler alÄ±namadÄ±')))
    );
  }

  private handleError(error: HttpErrorResponse): string {
    if (error.status === 404) {
      return 'ÃœrÃ¼nler bulunamadÄ±';
    } else if (error.status === 500) {
      return 'Sunucu hatasÄ±, lÃ¼tfen daha sonra tekrar deneyin';
    }
    return `Hata: ${error.message || 'Bilinmeyen bir hata oluÅŸtu'}`;
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}

/**
 * FILTER OPERATÃ–RÃœ NE YAPAR?
 *
 * ğŸ”¹ filter(), bir observableâ€™dan gelen verileri belirli bir koÅŸula gÃ¶re sÃ¼zer.
 * ğŸ”¸ Sadece koÅŸulu saÄŸlayan veriler (true dÃ¶ndÃ¼renler) yayÄ±lÄ±r, diÄŸerleri atlanÄ±r.
 *
 * destroy$ NE YAPAR?
 * ğŸ”¹ destroy$, bir Subject<void> olarak abonelikleri kontrol etmek iÃ§in sinyal yayar.
 * ğŸ”¸ takeUntil(this.destroy$) ile, komponent yok edildiÄŸinde (ngOnDestroy) tÃ¼m abonelikler otomatik iptal edilir.
 * ğŸ”¸ Bellek sÄ±zÄ±ntÄ±larÄ±nÄ± Ã¶nler; Ã¶rneÄŸin, HTTP istekleri veya zamanlayÄ±cÄ±lar Ã§alÄ±ÅŸmaya devam etmez.
 *
 * Bu Ã¶rnekte:
 *    - products-modules$: APIâ€™den Ã¼rÃ¼n listesini Ã§eker.
 *    - filter(products-modules => Array.isArray(products-modules)): Gelen verinin dizi olduÄŸundan emin olur.
 *    - products-modules.filter(product => product.price > 100): FiyatÄ± 100â€™den bÃ¼yÃ¼k Ã¼rÃ¼nleri seÃ§er.
 *    - map ile isimler bÃ¼yÃ¼k harfe Ã§evrilir.
 *    - takeUntil(this.destroy$): Komponent yok edildiÄŸinde abonelik iptal edilir.
 *
 * ğŸ§  FARKI NEDÄ°R?
 *    - filter â†’ Verileri bireysel olarak koÅŸula gÃ¶re sÃ¼zer (Ã¶rneÄŸin, fiyat > 100).
 *    - map â†’ Verileri dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r, ama hiÃ§birini atlamaz (Ã¶rneÄŸin, isimleri bÃ¼yÃ¼k harfe Ã§evirir).
 * Not: filter()â€™Ä±n koÅŸulu performans aÃ§Ä±sÄ±ndan basit olmalÄ±; karmaÅŸÄ±k filtrelemeler sunucu tarafÄ±na taÅŸÄ±nabilir.
 */
